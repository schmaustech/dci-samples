---

- name: Add Master Node to Inventory
  add_host:
    name: "undercloud"
    ansible_fqdn: "{{ undercloud_ip }}"
    ansible_user: "bschmaus"
    ansible_ssh_user: "bschmaus"
    ansible_password: "password"
    ansible_host: "{{ undercloud_ip }}"

- name: IPI-INSTALL Power OFF Bootstrap Node
  shell: |
    /usr/bin/ipmitool -I lanplus -H192.168.0.11 -p6251 -Uadmin -Ppassword chassis power off

- name: IPI-INSTALL Set Boot Device to CDROM Bootstrap Node
  shell: |
    /usr/bin/ipmitool -I lanplus -H192.168.0.11 -p6251 -Uadmin -Ppassword chassis bootparam set bootflag force_cdrom

- name: IPI-INSTALL Power ON BootStrap Node For Installation of RHEL8
  shell: |
    /usr/bin/ipmitool -I lanplus -H192.168.0.11 -p6251 -Uadmin -Ppassword chassis power on
    sleep 30

- name: IPI-INSTALL Wait for RHEL8 Installation to Poweroff Node
  shell: |
    until /usr/bin/ipmitool -I lanplus -H192.168.0.11 -p6251 -Uadmin -Ppassword chassis status|grep "System Power"|grep off; do sleep 30; done
    echo Bootstrap node is installed and shutdown!!!

- name: IPI-INSTALL Set Boot Device to Disk Bootstrap Node
  shell: |
    /usr/bin/ipmitool -I lanplus -H192.168.0.11 -p6251 -Uadmin -Ppassword chassis bootparam set bootflag force_disk

- name: IPI-INSTALL Power ON BootStrap Node After RHEL8 Installation
  shell: |
    /usr/bin/ipmitool -I lanplus -H192.168.0.11 -p6251 -Uadmin -Ppassword chassis power on

- name: IPI-INSTALL Wait for RHEL8 Bootstrap Node to Power Up
  shell: |
    until ssh -q -oStrictHostKeyChecking=no bschmaus@192.168.0.246 exit; do sleep 30; done
    echo Bootstrap node is up!

  # All these actions will be run on the primary Master node.
- delegate_to: undercloud
  block:
    - name: Set the release name
      set_fact:
        release: '{{ hostvars.localhost.job_informations.job.topic.data.releasename }}'

    - name: IPI-INSTALL Generate Bridge and Provisioning Interfaces
      shell: |
        export PROV_CONN=ens3
        export MAIN_CONN="ens4"
        bash -x <<EOS
        nmcli connection add ifname provisioning type bridge con-name provisioning
        nmcli con add type bridge-slave ifname "$PROV_CONN" master provisioning
        nmcli connection add ifname baremetal type bridge con-name baremetal
        nmcli con add type bridge-slave ifname "$MAIN_CONN" master baremetal
        nmcli con down "System $MAIN_CONN"
        pkill dhclient
        dhclient baremetal
        nmcli connection modify provisioning ipv4.addresses 172.22.0.1/24 ipv4.method manual
        nmcli con down provisioning
        nmcli con up provisioning
        EOS
      become: true

    - name: IPI-INSTALL Pull Latest OC and OpenShift Installer
      shell: |
        cd /home/bschmaus/
        export VERSION=$(curl -s https://mirror.openshift.com/pub/openshift-v4/clients/ocp-dev-preview/latest/release.txt | grep 'Name:' | awk -F: '{print $2}' | xargs)
        export RELEASE_IMAGE=$(curl -s https://mirror.openshift.com/pub/openshift-v4/clients/ocp-dev-preview/latest/release.txt | grep 'Pull From: quay.io' | awk -F ' ' '{print $3}' | xargs)
        export pullsecret_file=/home/bschmaus/pull-secret.json
        export cmd=openshift-baremetal-install
        export extract_dir=$(pwd)
        curl -s https://mirror.openshift.com/pub/openshift-v4/clients/ocp-dev-preview/latest/openshift-client-linux-$VERSION.tar.gz | tar zxvf - oc
        sudo cp /home/bschmaus/oc /usr/local/bin/oc
        /usr/local/bin/oc adm release extract --registry-config "${pullsecret_file}" --command=$cmd --to "${extract_dir}" ${RELEASE_IMAGE}
        sudo usermod --append --groups libvirt bschmaus

    - name: IPI-INSTALL Define Default Libvirt Pool
      shell: |
        cd /home/bschmaus
        virsh pool-define-as --name default --type dir --target /var/lib/libvirt/images
        virsh pool-start default
        virsh pool-autostart default
        virsh pool-list
        setenforce permissive
        sed -i "s/=enforcing/=permissive/g" /etc/selinux/config
      become: true

    - name: IPI-INSTALL Clone OpenShift Installer
      shell: |
        cd /home/bschmaus
        mkdir -p /home/bschmaus/go/src/github.com/openshift
        cd /home/bschmaus/go/src/github.com/openshift
        git clone https://github.com/openshift/installer

    - name: IPI-INSTALL Make Install Config YAML
      shell: |
        cd /home/bschmaus
        /usr/bin/ansible-playbook -i /home/bschmaus/hosts /home/bschmaus/make-install-config.yml
      
    - name: IPI-INSTALL Disconnect Install Repository Configuration 
      shell: |
        cd /home/bschmaus
        yum -y install podman httpd httpd-tools
        podman stop registry
        mkdir -p /opt/registry/{auth,certs,data}
        openssl req -newkey rsa:4096 -nodes -sha256 -keyout /opt/registry/certs/domain.key -x509 -days 365 -out /opt/registry/certs/domain.crt -subj "/C=US/ST=Minnesota/L=Brooklyn Park/O=Red Hat/OU=Engineering/CN=rhel8-ocp-auto.schmaustech.com"
        cp /opt/registry/certs/domain.crt /home/bschmaus/domain.crt
        chown bschmaus:bschmaus /home/bschmaus/domain.crt
        cp /opt/registry/certs/domain.crt /etc/pki/ca-trust/source/anchors/
        update-ca-trust extract
        htpasswd -bBc /opt/registry/auth/htpasswd dummy dummy
        firewall-cmd --add-port=5000/tcp --zone=libvirt  --permanent
        firewall-cmd --add-port=5000/tcp --zone=public   --permanent
        firewall-cmd --add-service=http  --permanent
        firewall-cmd --reload
        podman create --name poc-registry -p 5000:5000 -v /opt/registry/data:/var/lib/registry:z -v /opt/registry/auth:/auth:z -e "REGISTRY_AUTH=htpasswd" -e "REGISTRY_AUTH_HTPASSWD_REALM=Registry" -e "REGISTRY_HTTP_SECRET=ALongRandomSecretForRegistry" -e REGISTRY_AUTH_HTPASSWD_PATH=/auth/htpasswd -v /opt/registry/certs:/certs:z -e REGISTRY_HTTP_TLS_CERTIFICATE=/certs/domain.crt -e REGISTRY_HTTP_TLS_KEY=/certs/domain.key docker.io/library/registry:2
        podman stop poc-registry
        podman start poc-registry
      become: true

    - name: IPI-INSTALL Fixup Install-Config.yaml
      shell: |
        sed -i -e 's/^/  /' /home/bschmaus/domain.crt
        sed  -i '/^pullSecret/d' /home/bschmaus/install-config.yaml
        cat /home/bschmaus/local_pull_secret >> /home/bschmaus/install-config.yaml
        echo "additionalTrustBundle: |" >> /home/bschmaus/install-config.yaml
        cat /home/bschmaus/domain.crt >> /home/bschmaus/install-config.yaml
    
    - name: IPI-INSTALL Mirror CI Locally
      shell: |
        cd /home/bschmaus
        source /home/bschmaus/common.sh
        /usr/local/bin/oc adm release mirror -a $LOCAL_SECRET_JSON --from=$UPSTREAM_REPO --to-release-image=$LOCAL_REG/$LOCAL_REPO:$OCP_RELEASE --to=$LOCAL_REG/$LOCAL_REPO

    - name: IPI-INSTALL Add imageContentSources Local Repo to Install-Config.yaml
      shell: |
        cd /home/bschmaus/
        source /home/bschmaus/common.sh
        NEW_RELEASE=`echo $OCP_RELEASE|sed s/.0-0.ci//g`
        sed -i s/RELEASEVERSION/$NEW_RELEASE/g /home/bschmaus/install-config.yaml

    - name: IPI-INSTALL Build OpenShift Installer
      shell: |
        cd /home/bschmaus/go/src/github.com/openshift/installer
        mkdir /home/bschmaus/go/src/github.com/openshift/installer/ocp
        cp /home/bschmaus/install-config.yaml /home/bschmaus/go/src/github.com/openshift/installer/ocp
        source /home/bschmaus/common.sh
        TAGS="baremetal libvirt" hack/build.sh

    - name: IPI-INSTALL Set RHCOS Image URL
      shell: |
        cd /home/bschmaus
        OPENSHIFT_INSTALLER=/home/bschmaus/go/src/github.com/openshift/installer/bin/openshift-install
        OPENSHIFT_INSTALL_COMMIT=$($OPENSHIFT_INSTALLER version | grep commit | cut -d' ' -f4)
        OPENSHIFT_INSTALLER_RHCOS=${OPENSHIFT_INSTALLER_RHCOS:-https://raw.githubusercontent.com/openshift/installer/$OPENSHIFT_INSTALL_COMMIT/data/data/rhcos.json}
        RHCOS_IMAGE_JSON=$(curl "${OPENSHIFT_INSTALLER_RHCOS}")
        export RHCOS_INSTALLER_IMAGE_URL=$(echo "${RHCOS_IMAGE_JSON}" | jq -r '.baseURI + .images.openstack.path')
        export RHCOS_IMAGE_URL=${RHCOS_IMAGE_URL:-${RHCOS_INSTALLER_IMAGE_URL}}
        sed -i "s#RHCOS_IMAGE_URL#${RHCOS_IMAGE_URL}#" /home/bschmaus/metal3-config.yaml

    - name: IPI-INSTALL Deploy OpenShift Cluster
      shell: |
        cd /home/bschmaus/go/src/github.com/openshift/installer
        source /home/bschmaus/common.sh
        bin/openshift-install --dir=ocp create manifests
        cp /home/bschmaus/metal3-config.yaml /home/bschmaus/go/src/github.com/openshift/installer/ocp/openshift/99_metal3-config.yaml 
        bin/openshift-install --dir=ocp --log-level debug create cluster
